use futures::StreamExt;
use std::{
    net::{IpAddr, Ipv6Addr},
    thread,
};

use eframe::egui;
use futures::prelude::*;
use tarpc::{
    context,
    server::{self, Channel},
    tokio_serde::formats::Json,
};
use tokio::{runtime::Runtime, sync::mpsc};

pub struct Application {
    name: String,
    age: u32,
}

impl Default for Application {
    fn default() -> Self {
        Self {
            name: "Arthur".to_owned(),
            age: 42,
        }
    }
}

impl eframe::App for Application {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("My egui Application");
            ui.horizontal(|ui| {
                let name_label = ui.label("Your name: ");
                ui.text_edit_singleline(&mut self.name)
                    .labelled_by(name_label.id);
            });
            ui.add(egui::Slider::new(&mut self.age, 0..=120).text("age"));
            if ui.button("Increment").clicked() {
                self.age += 1;
            }
            ui.label(format!("Hello '{}', age {}", self.name, self.age));
        });
    }
}

pub enum ServerMessage {
    NewData(String),
    StatusUpdate(String),
    Error(String),
}

// Messages from GUI to RPC server
pub enum GuiMessage {
    SendData(String),
    RequestUpdate,
}

#[tarpc::service]
pub trait World {
    async fn hello(name: String) -> String;
    async fn handle_recvfrom(data: Vec<u8>) -> String;
}
#[derive(Clone)]
pub struct HelloServer {
    pub gui_tx: mpsc::UnboundedSender<ServerMessage>,
}

impl World for HelloServer {
    async fn hello(self, _: context::Context, name: String) -> String {
        format!("Hello, {name}! You are connected")
    }

    async fn handle_recvfrom(self, _: context::Context, data: Vec<u8>) -> String {
        println!("handle_recvfrom: {data:?}");

        for (_, byte) in data.iter().enumerate() {
            println!("got {byte:02X}");
        }

        "got it".to_string()
    }
}

pub async fn spawn(fut: impl Future<Output = ()> + Send + 'static) {
    tokio::spawn(fut);
}

fn main() -> eframe::Result {
    env_logger::init(); // Log to stderr (if you run with `RUST_LOG=debug`).

    let (_server_tx, mut server_rx) = mpsc::unbounded_channel::<GuiMessage>();
    let (gui_tx, _gui_rx) = mpsc::unbounded_channel::<ServerMessage>();

    // Spawn tokio runtime in a separate thread
    let _hdl = thread::spawn(move || {
        let rt = Runtime::new().unwrap();

        rt.block_on(async move {
            let server_addr = (IpAddr::V6(Ipv6Addr::LOCALHOST), 5000);

            let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Json::default)
                .await
                .expect("TODO");

            listener
                // Ignore accept errors.
                .filter_map(|r| future::ready(r.ok()))
                .map(server::BaseChannel::with_defaults)
                // serve is generated by the service attribute. It takes as input any type implementing
                // the generated World trait.
                .map(|channel| {
                    let hello_server: HelloServer = HelloServer {
                        gui_tx: gui_tx.clone(),
                    };
                    channel.execute(hello_server.serve()).for_each(spawn)
                })
                // Max 10 channels.
                .buffer_unordered(10)
                .for_each(|_| async {})
                .await;
        });
    });

    let options = eframe::NativeOptions {
        viewport: egui::ViewportBuilder::default().with_inner_size([320.0, 240.0]),
        ..Default::default()
    };

    eframe::run_native(
        "My egui App",
        options,
        Box::new(|cc| Ok(Box::<Application>::default())),
    )
}
